{
    "collab_server" : "",
    "contents" : "##Pick Data and Source in c++ code, then RUN!!!\n##SimList[[1]] has the stuff we need from Phase I/II\nload(\"PH12SCEN1.rda\")\n\n##Set Design Epsilon\nepsilon=.05\n\nAccrue = 10\n\n\n##Parameters for Simulating Phase 3\n#betaA = c(.25, .5, -.5, -1.5, log(36/1.2))\n#betaA = c(.25, .5, -.5, -3, log(36/1.257))\n\nbetaA = c(.25, .5, -.5, -2, log(36/1.257))\n\n\nbetaC=c(.5,-.5,log(24/1.185153))\nProbC = c(.4,.15)\nprobT = c(.1,.15,.25,.35,.5)\nprobE=c(.2,.4,.6,.7,.8)\n\n\n##Efftox Parameters\nContour = c(.35, .75,.7,.4)\n###Reorder Correctly\nHypermeans = c(.022,3.45,0,-4.23,3.1,0)\nHypervars = c(2.6761, 2.6852, .2, 3.1304, 3.1165, 1)\nHypervars=Hypervars^2\nAccept = c(.3,.3)\nLower=c(.1,.1)\n\n\n##Library objects\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(survival)\n##Source in c++ code\nsourceCpp(\"D:/Users/Andrew/Desktop/Rice/Dr.Thall/Phase123/USECONT1.cpp\")\n\nsourceCpp(\"D:/Users/Andrew/Desktop/Rice/Dr.Thall/Phase123/EFFTOX7.cpp\")\n\n##Do we want to switch prior to phase 3?\nDOUBLE=0\n##Do you want to test the usual paradigm? Will always select BEST dose.\nTEST=0\nBestDose=3\n##\nnREP=5000\n##Specify Null=0 or alternative =1\nHyp =  1 \n##How Long in phase I/II\nTime2=1\n##How long in between phases\nTwait=1\n##Dose levels\nDose=c(1,2,3,3.5,5)\nDoselog = log(Dose)-mean(log(Dose))\nDose=(Dose-mean(Dose))/sd(Dose)\n###################################\n##NOW FLY LIKE THE WINDDD!!!!\n########################################\n\n\n\n\n##Book Keeping\nNsims=nREP\nALT=Hyp\n\n\nWhat=rep(NA,5000)\nfor(b in 1:5000){\n  What[b]=SimList[[h]][[1]]\n}\n\n\n\nNmax1=800\nNmax=Nmax1\n##Number of events for looks (first look is the swap/switch)\nNLook1 = 50\nNLook = c(50,200,300)\n\nNLook2=NLook\n##Superiority Boundaries (length 1 less than NLook)\nSup = c(2.669, 1.981)\n##Futility Boundaries (length 1 less than Sup)\nFut = c(.734)\n\n\n##Control parameter\ncmu = 24\n\n\nCHOSENDOSE = rep(NA,nREP)\nPRUNEDDOSE=CHOSENDOSE\nStartingDose=CHOSENDOSE\nDECISION=CHOSENDOSE\nDECISIONREG=CHOSENDOSE\nNpats = CHOSENDOSE\nNpatsREG = CHOSENDOSE\nTRIALTIMES = CHOSENDOSE\nTRIALTIMESREG = CHOSENDOSE\nTrialTimes=rep(NA,Nsims)\n\nMaxObs = matrix(rep(NA,length(Dose)*4),nrow=4)\n\n\n\nfor(h in 1:nREP){\n###Get Accrual in Phase III trial\nACC = cumsum(rexp(Nmax*2,Accrue))\n\n##This Will store our overall treament in the trial\nTrt = rep(NA,Nmax*2)\n##Generate the outcomes for the control\nTimeCont=rep(NA,Nmax)\nYECont=TimeCont\nYTCont=TimeCont\nfor(b in 1:length(TimeCont)){\n  \n  YE=rbinom(1,1,ProbC[1])\n  YT=rbinom(1,1,ProbC[2])\n  \n  YECont[b]=YE\n  YTCont[b]=YT\n  \n  \n  TimeCont[b]=rexp(1,1/exp(YE*betaC[1]+YT*betaC[2]+betaC[3]))\n  \n  \n  \n}\n##Now we have the control outcomes\n\n\n##Set the time to 0\ntrial.time=0\ntrial.time1=0\n##Setup Storage matrices for this simulation rep\nTimes=rep(NA,Nmax*2)\nTimesSET=Times\nYE=Times\nYT=Times\nYESET=YE\nYTSET=YE\nDoses=Times\nTreat=Times\nBest=NA\nIndex=rep(1,length(Dose)+1)\n\n\n\n\n##Get the Set Of doses\nVEC = SimList[[h]][[2]]\nSET = which(abs(VEC-max(VEC))<epsilon)\n\n\nTRTSET=Trt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndex=rep(1,6)\n\n\n\nXOLD = SimList[[h]][[3]][,1]\n\n\n\n\n\nYEOLD=SimList[[h]][[3]][,2]\nYTOLD=SimList[[h]][[3]][,3]\n\nACCOLD =SimList[[h]][[3]][,4]\n\n\nif(Hyp==0){\nTIMEOLD=SimList[[h]][[3]][,5]\n}else{\n  TIMEOLD=SimList[[h]][[3]][,6]\n  \n}\n\n\n\n\nif(TEST==1){\n  OptDose = BestDose\n}else{\n\n  OptDose=SimList[[h]][[1]]\n}\n\nStartingDose[h]=OptDose\n\n\n\n  \n  \n  OptDose1=OptDose\n  \n  trial.time=ACC[1]\n  \n  ##Setup Storage matrices\n  Times=rep(NA,Nmax1*2)\n  YE=Times\n  YT=Times\n  Doses=Times\n  Treat=Times\n  ##Stores Best treatment\n  Best=NA\n  Index=rep(1,length(Dose)+1)\n  \n  ###Enroll patients in the trial between two doses until the first interim look for dose switching\n  NDeath=0\n  i=1\n  Nmax=Nmax1\n  \n  trial.time1=trial.time\n  while(NDeath<NLook[1]){\n    \n    \n      trial.time = trial.time +(ACC[i+1]-ACC[i])\n      \n      Trt[i]=rbinom(1,1,.5)\n      \n      YE[i]=YECont[i]\n      YT[i]=YTCont[i]\n    \n    \n    ##If Group=0 it's in the control\n    if(Trt[i]==0){\n      Times[i]=TimeCont[i]\n      Treat[i]=0\n      Index[6]=Index[6]+1;\n      Doses[i]=0\n    }else{\n      ##Generate Binary indicators for first part of trial\n      YE[i]  = rbinom(1,1,probE[OptDose])\n      YT[i] =  rbinom(1,1,probT[OptDose])\n      Times[i]= rexp(1,1/exp(betaA[1]*Dose[OptDose]+betaA[4]*Dose[OptDose]^2+YE[i]*betaA[2]+YT[i]*betaA[3]+betaA[5]))\n      \n      \n      \n      Index[OptDose]=Index[OptDose]+1\n      \n      Doses[i]=OptDose\n      \n    }\n    \n    \n    \n    \n    \n    ##Calculate the numnber of toxicities in the trial thusfar\n    NDeath = sum((ACC+Times)<trial.time,na.rm=TRUE)\n    \n    \n    ##Add to i\n    i=i+1\n    \n    \n  }\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  ##Now we have NLook patient events. Let's see what dose we should use for the remainder of the trial\n  \n  TimesREG = Times\n  DosesREG=Doses\n  iREG=i\n  trial.reg = trial.time\n  \n  \n  Y = Times[1:(i-1)]\n  ACC1=ACC[1:(i-1)]\nTrt1=Trt[1:(i-1)]\n\n  Y = pmin(Y,trial.time-ACC1)\n  I = (Y+ACC1)<trial.time\n\n  YE1 = YE[1:(i-1)]\n  YT1 = YT[1:(i-1)]\n  \n  YE1=c(YE1,YEOLD)\n  YT1=c(YT1,YTOLD)\n  \n  ##Package up the phase I/II data too\n  Doses1= Doses[1:(i-1)]\n  \n  \n  ##Time accrued into Phase I/II portion of trial.\n  ACCOLD1=max(ACCOLD)-ACCOLD - Time2 + Twait\n  \n  TIMEOLD1 = pmin(TIMEOLD,ACCOLD1+trial.time)\n  IOLD1=(TIMEOLD==TIMEOLD1)\n  \n  \n  Trt2=c(Trt1,rep(1,length(YEOLD)))\n  \n  Y=c(Y,TIMEOLD1)\n  I=c(I,IOLD1)\n  Doses2=c(Doses1,XOLD)\n  \n  ##Remove Any Doses That Has less than 3 patients, we don't want to use this data. \n\n  \n  \n  B=2e3\n\n\n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n\n  \n  ##Use EFFTOX PROGRAM TO GET probmat quantities!!\n  G2=EFFTOX(YE1, YT1, Dose[Doses2],Dose,  Hypermeans,  Hypervars,  Contour,  Accept, Lower,  B )\n  \n\n  probmat1=G2[[2]]\n  \n  B=2e3\n  \n  \n\n  \n  \n  \n  if(sum(YE1[YT1==0]==0)>0){\n    MaxObs[1,]=rep(max(Y[YE1==0 & YT1==0]),length(Dose))\n  }else{\n    MaxObs[1,]=rep(0,length(Dose))\n  }\n  \n  \n  if(sum(YE1[YT1==0]==1)>0){\n    MaxObs[2,]=rep(max(Y[YE1==1 & YT1==0]),length(Dose))\n  }else{\n    MaxObs[2,]=rep(0,length(Dose))\n  }\n  \n  if(sum(YE1[YT1==1]==0)>0){\n    MaxObs[3,]=rep(max(Y[YE1==0 & YT1==1]),length(Dose))\n  }else{\n    MaxObs[3,]=rep(0,length(Dose))\n  }\n  \n  \n  if(sum(YE1[YT1==1]==1)>0){\n    MaxObs[4,]=rep(max(Y[YE1==1 & YT1==1]),length(Dose))\n  }else{\n    MaxObs[4,]=rep(0,length(Dose))\n  }\n  \n  \n  \n  \n YE1=(YE1-mean(YE1))/sd(YE1)\n YT1=(YT1-mean(YT1))/sd(YT1)\n  \n  \n  ##Have Data For trial, Run MCMC\n \n Doses2[Doses2==0]=1\n  \n\n\n  \n G1=PieceMCMC(Y,I,YE1,YT1,Dose[Doses2],Dose,B,probmat1,MaxObs,Trt2)\n  ##Get the mean from this\n# G1=PieceMCMC(Y,I,YE1,YT1,Dose[Doses2],Dose,B,probmat1,matrix(rep(max(MaxObs),5*4),nrow=4))\n  \n# G1=PieceMCMC(Y,I,YE1,YT1,Dose[Doses2],Dose,B,matrix(rep(colMeans(probmat),5),nrow=5,byrow=TRUE),matrix(rep(max(MaxObs),5*4),nrow=4))\n \n   \n  \n  G2=G1[[1]][(B/2):B,]\n  \n  VEC1 = colMeans(G2,na.rm=TRUE)\n  \n  for(k in 1:length(VEC1)){\n    if(is.nan(VEC1[k])){\n      VEC1[k]=0\n    }\n      \n    \n  \n    \n  }\n  \n  \n  \n  \n  \n  \n\n  \n  ##Change\n  OptDose = which(VEC1==max(VEC1))\n  \n  \n  \n  ## Check if two cohorts treated\n  for(m in 1:length(Dose)){\n    if(sum(Doses2==OptDose)<6){\n      \n      ##Less than 2 cohorts treated\n      if(OptDose>1){\n        \n        if(OptDose<length(Dose)){ \n          \n          if(sum(Doses2==(OptDose+1))<6){\n            OptDose=OptDose-1\n          }else{\n            if(VEC1[OptDose-1]>VEC1[OptDose+1]){\n              OptDose=OptDose-1\n            }else{\n              OptDose=OptDose+1\n            }\n            \n            \n          }\n          \n        }else{\n          \n          OptDose=OptDose-1\n        }\n        \n      }else{\n        OptDose=OptDose+1\n      }\n      \n    }\n  }\n  \n  \n  OptDose3=OptDose\n\n\n\n  \n  \n\n  \n  if(length(OptDose)>1){\n    break\n  }\n  CHOSENDOSE[h]=OptDose\n  \n  \n  \n  \n##Now we have the pruning Set\n\n  if(length(SET)>1){\n  \n  i=1\n  NDeath=0\n  \n  ##Enroll in the set design\n  while(NDeath<NLook[1]){\n    \n    \n    trial.time1 = trial.time1 +(ACC[i+1]-ACC[i])\n    \n    TRTSET[i]=sample(c(0,SET),1)\n    \n    \n    ##If Group=0 it's in the control\n    if(TRTSET[i]==0){\n      TimesSET[i]=TimeCont[i]\n      Index[6]=Index[6]+1;\n    }else{\n      ##Generate Binary indicators for first part of trial\n      YESET[i]  = rbinom(1,1,probE[TRTSET[i]])\n      YTSET[i] = rbinom(1,1,probT[TRTSET[i]])\n      TimesSET[i]= rexp(1,1/exp(YESET[i]*betaA[2]+YTSET[i]*betaA[3]+betaA[1]*Dose[TRTSET[i]]+betaA[4]*Dose[TRTSET[i]]^2+betaA[5]))\n      \n      \n      \n    }\n    \n    \n    \n    \n    \n    ##Calculate the numnber of toxicities in the trial thusfar\n    NDeath = sum((ACC+TimesSET)<trial.time1,na.rm=TRUE)\n    \n    \n    ##Add to i\n    i=i+1\n    \n    \n  }\n  \n  \n    \n  \n  Y = TimesSET[1:(i-1)]\n  ACC1=ACC[1:(i-1)]\n  Trt1=Trt[1:(i-1)]\n\n\n  \n  Y = pmin(Y,trial.time-ACC1)\n  I = (Y+ACC1)<trial.time1\n  \n  YE1 = YE[1:(i-1)]\n  YT1 = YT[1:(i-1)]\n  \n  YE1=c(YE1,YEOLD)\n  YT1=c(YT1,YTOLD)\n  \n  ##Package up the phase I/II data too\n  Doses1= Doses[1:(i-1)]\n  \n  \n  ##Time accrued into Phase I/II portion of trial.\n  ACCOLD1=max(ACCOLD)-ACCOLD - Time2 + Twait\n  \n  TIMEOLD1 = pmin(TIMEOLD,ACCOLD1+trial.time1)\n  IOLD1=(TIMEOLD==TIMEOLD1)\n  \n  \n  Trt2=c(Trt1,rep(1,length(YEOLD)))\n  \n  Y=c(Y,TIMEOLD1)\n  I=c(I,IOLD1)\n  Doses2=c(Doses1,XOLD)\n  \n  ##Remove Any Doses That Has less than 3 patients, we don't want to use this data. \n  \n  \n  \n  \n  ##Time accrued into Phase I/II portion of trial.\n  ACCOLD1=max(ACCOLD)-ACCOLD - Time2 + Twait\n  \n  TIMEOLD1 = pmin(TIMEOLD,ACCOLD1+trial.time1)\n  IOLD1=(TIMEOLD==TIMEOLD1)\n  \n  \n  \n  \n  Y=c(Y,TIMEOLD1)\n  I=c(I,IOLD1)\n  Doses2=c(Doses1,XOLD)\n  \n  ##Remove Any Doses That Has less than 3 patients, we don't want to use this data. \n  \n  \n  \n  B=2e3\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  ##Use EFFTOX PROGRAM TO GET probmat quantities!!\n  G2=EFFTOX(YE1, YT1, Dose[Doses2],Dose,  Hypermeans,  Hypervars,  Contour,  Accept, Lower,  B )\n  \n  \n  \n  \n  \n  \n  \n  \n  if(sum(YE1[YT1==0]==0)>0){\n    MaxObs[1,]=rep(max(Y[YE1==0 & YT1==0]),length(Dose))\n  }else{\n    MaxObs[1,]=rep(0,length(Dose))\n  }\n  \n  \n  if(sum(YE1[YT1==0]==1)>0){\n    MaxObs[2,]=rep(max(Y[YE1==1 & YT1==0]),length(Dose))\n  }else{\n    MaxObs[2,]=rep(0,length(Dose))\n  }\n  \n  if(sum(YE1[YT1==1]==0)>0){\n    MaxObs[3,]=rep(max(Y[YE1==0 & YT1==1]),length(Dose))\n  }else{\n    MaxObs[3,]=rep(0,length(Dose))\n  }\n  \n  \n  if(sum(YE1[YT1==1]==1)>0){\n    MaxObs[4,]=rep(max(Y[YE1==1 & YT1==1]),length(Dose))\n  }else{\n    MaxObs[4,]=rep(0,length(Dose))\n  }\n  \n  \n  \n  \n  probmat1=G2[[2]]\n  \n  B=2e3\n  \n  \n YE1=(YE1-mean(YE1))/sd(YE1)\n YT1=(YT1-mean(YT1))/sd(YT1)\n  \n  \n  ##Have Data For trial, Run MCMC\n \n Doses2[Doses2==0]=1\n \n  \n  G1=PieceMCMC(Y,I,YE1,YT1,Dose[Doses2],Dose,B,probmat1,MaxObs,Trt2)\n  ##Get the mean from this\n  # G1=PieceMCMC(Y,I,YE1,YT1,Dose[Doses2],Dose,B,probmat1,matrix(rep(max(MaxObs),5*4),nrow=4))\n  \n  # G1=PieceMCMC(Y,I,YE1,YT1,Dose[Doses2],Dose,B,matrix(rep(colMeans(probmat),5),nrow=5,byrow=TRUE),matrix(rep(max(MaxObs),5*4),nrow=4))\n  \n  \n  \n  G2=G1[[1]][(B/2):B,]\n  \n  VEC1 = colMeans(G2,na.rm=TRUE)\n  \n  for(k in 1:length(VEC1)){\n    if(is.nan(VEC1[k])){\n      VEC1[k]=0\n    }\n    \n    \n    \n    \n  }\n  \n  #VEC1[-SET]=0\n  \n  ##Change\n  OptDose = which(VEC1==max(VEC1))\n\n  \n  ## Check if two cohorts treated\n  for(m in 1:length(Dose)){\n    if(sum(Doses2==OptDose)<6){\n      \n      ##Less than 2 cohorts treated\n      if(OptDose>1){\n        \n        if(OptDose<length(Dose)){ \n          \n          if(sum(Doses2==(OptDose+1))<6){\n            OptDose=OptDose-1\n          }else{\n            if(VEC1[OptDose-1]>VEC1[OptDose+1]){\n              OptDose=OptDose-1\n            }else{\n              OptDose=OptDose+1\n            }\n            \n            \n          }\n          \n        }else{\n          \n          OptDose=OptDose-1\n        }\n        \n      }else{\n        OptDose=OptDose+1\n      }\n      \n    }\n  }\n  \n\n  PRUNEDDOSE[h]=OptDose\n  \n  \n  }else{\n    \n    PRUNEDDOSE[h]=CHOSENDOSE[h]\n  }\n  \n \n \n}\n\ncat(\"Starting Doses\")\ntable(StartingDose)/h\ncat(\"Select and Switch\")\ntable(CHOSENDOSE)/h\ncat(\"Set Design\")\ntable(PRUNEDDOSE)/h\n\n\ncat(\"Select and Switch Transitions\")\ntable(CHOSENDOSE,StartingDose)\n",
    "created" : 1509578102534.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3672445600",
    "id" : "AE4E71C9",
    "lastKnownWriteTime" : 1509578021,
    "last_content_update" : 1509578021,
    "path" : "D:/Users/Andrew/Desktop/Rice/Dr.Thall/Phase123/NEW/SIMULATEUSECONTROL.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}